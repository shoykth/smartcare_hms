rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to get user role
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    function isAdmin() {
      return getUserRole() == 'admin';
    }
    
    function isDoctor() {
      return getUserRole() == 'doctor';
    }
    
    function isPatient() {
      return getUserRole() == 'patient';
    }
    
    // ========================================
    // USERS COLLECTION
    // ========================================
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && isAdmin();
      
      match /availability/{slotId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && request.auth.uid == userId;
      }
      
      match /notifications/{notificationId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // ========================================
    // PATIENTS COLLECTION
    // ========================================
    match /patients/{patientId} {
      // Admins can do anything
      allow read, write, delete: if request.auth != null && isAdmin();
      
      // Doctors can read all patients
      allow read: if request.auth != null && isDoctor();
      
      // Doctors can create patients
      allow create: if request.auth != null && isDoctor();
      
      // Doctors can update patients (all fields)
      allow update: if request.auth != null && isDoctor();
      
      // Patients can read only their own record
      allow read: if request.auth != null && request.auth.uid == patientId;
    }
    
    // ========================================
    // DEPARTMENTS COLLECTION
    // ========================================
    match /departments/{departmentId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }
    
    // ========================================
    // DOCTORS COLLECTION
    // ========================================
    match /doctors/{doctorId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && (isDoctor() || isAdmin());
      allow update: if request.auth != null && (request.auth.uid == doctorId || isAdmin());
      allow delete: if request.auth != null && isAdmin();
    }
    
    // ========================================
    // APPOINTMENTS COLLECTION (Enhanced Phase 4)
    // ========================================
    match /appointments/{appointmentId} {
      // Patients can create appointments for themselves
      allow create: if request.auth != null &&
                    request.resource.data.patientId == request.auth.uid &&
                    request.resource.data.createdBy == request.auth.uid &&
                    request.resource.data.status == 'pending';
      
      // Read: Patient, Doctor, or Admin
      allow read: if request.auth != null && 
        (resource.data.doctorId == request.auth.uid || 
         resource.data.patientId == request.auth.uid ||
         isAdmin());
      
      // Update: Patient (cancel only), Doctor (status/notes), Admin (all)
      allow update: if request.auth != null && 
        (
          (resource.data.patientId == request.auth.uid &&
           request.resource.data.status == 'cancelled') ||
          (resource.data.doctorId == request.auth.uid) ||
          isAdmin()
        );
      
      // Delete: Only admin
      allow delete: if request.auth != null && isAdmin();
    }
    
    // ========================================
    // DOCTOR AVAILABILITY COLLECTION (Phase 4) - FIXED!
    // ========================================
    match /doctor_availability/{availabilityId} {
      // Anyone authenticated can read all availability (for booking)
      allow read: if request.auth != null;
      
      // Only the doctor can create their own availability
      allow create: if request.auth != null &&
                    request.resource.data.doctorId == request.auth.uid;
      
      // Only the doctor who owns it or admin can update
      allow update: if request.auth != null &&
                    (resource.data.doctorId == request.auth.uid || isAdmin());
      
      // Only the doctor who owns it or admin can delete
      allow delete: if request.auth != null &&
                    (resource.data.doctorId == request.auth.uid || isAdmin());
    }
    
    // ========================================
    // MEDICAL RECORDS COLLECTION
    // ========================================
    match /medical_records/{recordId} {
      allow read: if request.auth != null && 
        (resource.data.patientId == request.auth.uid || 
         resource.data.doctorId == request.auth.uid ||
         isAdmin());
      
      allow write: if request.auth != null && (isDoctor() || isAdmin());
      
      match /attachments/{fileId} {
        allow read: if request.auth != null && 
          (get(/databases/$(database)/documents/medical_records/$(recordId)).data.patientId == request.auth.uid ||
           get(/databases/$(database)/documents/medical_records/$(recordId)).data.doctorId == request.auth.uid ||
           isAdmin());
        allow write: if request.auth != null && (isDoctor() || isAdmin());
      }
    }
    
    // ========================================
    // MEDICAL NOTES COLLECTION
    // ========================================
    match /medical_notes/{noteId} {
      allow read: if request.auth != null && 
        (resource.data.patientId == request.auth.uid || 
         resource.data.doctorId == request.auth.uid ||
         isAdmin());
      
      allow create: if request.auth != null && isDoctor();
      
      allow update: if request.auth != null && 
        (resource.data.doctorId == request.auth.uid || isAdmin());
      
      allow delete: if request.auth != null && isAdmin();
    }
    
    // ========================================
    // BILLING COLLECTION
    // ========================================
    match /billing/{invoiceId} {
      allow read: if request.auth != null && 
        (resource.data.patientId == request.auth.uid || isAdmin());
      
      allow write: if request.auth != null && isAdmin();
    }
    
    // ========================================
    // NOTIFICATIONS COLLECTION
    // ========================================
    match /notifications/{notificationId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null;
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && isAdmin();
    }
    
    // ========================================
    // MESSAGES COLLECTION
    // ========================================
    match /messages/{conversationId} {
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      
      match /chat/{messageId} {
        allow read, write: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/messages/$(conversationId)).data.participants;
      }
    }
    
    // ========================================
    // ADMIN SETTINGS COLLECTION
    // ========================================
    match /admin_settings/{settingId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }
    
    // ========================================
    // ACTIVITY LOGS COLLECTION
    // ========================================
    match /activity_logs/{logId} {
      allow read: if request.auth != null && isAdmin();
      allow create: if request.auth != null;
      allow update, delete: if false;
    }
  }
}
